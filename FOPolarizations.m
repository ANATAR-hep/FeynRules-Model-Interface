




(************************)
(* Write Polarizations  *)
(************************)


FO$ScalarPolarization[field_]= 1;
FO$VectorPolarization[field_,ind_]:=PolV[QuestionMarka,Lor1,p1,m,Sequence@@Through[ind[1]]]/.{m-> Mass[field],GG_[x_]:> ToExpression[ToString[GG]<>ToString[x]]};
FO$FermionUPolarization[field_,ind_]:={SpinorU[QuestionMarka,p1,m,Sequence@@Through[ind[1]]],SpinorUbar[QuestionMarka,p1,m,Sequence@@Through[ind[1]]]}/.{m-> Mass[field],GG_[x_]:> ToExpression[ToString[GG]<>ToString[x]]};
FO$FermionVPolarization[field_,ind_]:={SpinorVbar[QuestionMarka,p1,m,Sequence@@Through[ind[1]]],SpinorV[QuestionMarka,p1,m,Sequence@@Through[ind[1]]]}/.{m-> Mass[field],GG_[x_]:> ToExpression[ToString[GG]<>ToString[x]]};

FO$Polarization[field_]:=Block[{IndicesField},

Which[

IndicesField=(Select[#,(Not[#===Index[Lorentz]])&]&)@$IndList[field]/.{Index[GG_]:> GG};

ScalarFieldQ[field]===True,FO$ScalarPolarization[field],
VectorFieldQ[field]===True, FO$VectorPolarization[field,IndicesField],
FermionQ[field]===True&& Not[GhostFieldQ[field]=== True]&&MemberQ[FieldsInFR,field]=== True, FO$FermionUPolarization[field,IndicesField],
FermionQ[field]===True&& Not[GhostFieldQ[field]=== True]&&MemberQ[antiFieldsInFR,field]===True, FO$FermionVPolarization[field,IndicesField]

]
];

(*  Write polarizations  *)

FO$WritePolarizations[out0_,allFieldsInFR_]:=Block[{out=out0,outfile,SubstitutionsPolarization,currentField,currentPolarization,currentFieldString,currentPolarizationString,index,strMomAux,lineLength,ast},


  (* Substitutions  *)

  index=1;
  SubstitutionsPolarization={
  Field_:> Field [TagIndex[[index]],MomentumFO[[index]],LorentzIndexFO[[index]],IndicesSequence[Field,index]]
  };

  strMomAux={"?initialMomenta","?finalMomenta"};

  outfile=out<>"/Polarizations"<>".frm";
  Print["Writing  polarizations and spinors in "<>outfile];

  lineLength=100;
  wsp="                                                                                                                             ";   
  ast="*****************************************************************************************************************************";  

  OpenWrite[outfile];
    WriteString[outfile,StringTake[ast,lineLength+1]<>"\n"];
    WriteString[outfile,StringTake["* File automalically generated by FeynRules -"<>wsp,lineLength]<>"*\n"];
    WriteString[outfile,StringTake["* date and time of generation : "<>DateString[]<>wsp,lineLength]<>"*\n"];
    WriteString[outfile,StringTake["* FeynRules model information : "<>wsp,lineLength]<>"*\n"];
    WriteString[outfile, HeadFormat[M$Information,lineLength,"*","*"]<>"\n"];
    WriteString[outfile,StringTake[ast,lineLength+1]<>"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"*****  This file contains the Propagators and Polarizations  *****\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"#procedure Polarizations\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"*****  Polarizations  *****\n"];
    WriteString[outfile,"\n"];
    Do[
      currentField=allFieldsInFR[[j]];
      currentPolarization=FO$Polarization@allFieldsInFR[[j]];

      If[Head[currentPolarization]===List,

      Do[
        currentFieldString=(StringReplace[#,("PartTag"~~char:LetterCharacter):>"?"<>char]&)@(StringReplace[#,("p"~~char:DigitCharacter):>"p"<>char<>strMomAux[[jj]]]&)@(StringReplace[#,("Lor"~~char:DigitCharacter):>"Lor"<>char<>"?"]&)@(StringReplace[#,("Spin"~~char:DigitCharacter):>"Spin"<>char<>"?"]&)@(StringReplace[#,("Gluon"~~char:DigitCharacter):>"Gluon"<>char<>"?"]&)@(StringReplace[#,("Colour"~~char:DigitCharacter):>"Colour"<>char<>"?"]&)@(StringReplace[#,"["-> "("]&)@(StringReplace[#,"]"-> ")"]&)@(ToString[InputForm[#]]&)@(currentField/.SubstitutionsPolarization);
        currentPolarizationString=((StringReplace[#,"Null"-> "0"]&)@(StringReplace[#,"FO$Gamma"-> "GammaM"]&)@(StringReplace[#,"FO$Delta"-> "d_"]&)@(StringReplace[#,("QuestionMark"~~char:LetterCharacter):>"?"<>char]&)@(StringReplace[#,"["-> "("]&)@(StringReplace[#,"]"-> ")"]&)@(ToString[InputForm[#]])&)@currentPolarization[[jj]];

        WriteString[outfile,"id   pol("<>currentFieldString<>") = "<>currentPolarizationString<>";\n"]
      ,{jj,1,2}],

      currentFieldString=(StringReplace[#,("PartTag"~~char:LetterCharacter):>"?"<>char]&)@(StringReplace[#,("p"~~char:DigitCharacter):>"p"<>char<>"?"]&)@(StringReplace[#,("Lor"~~char:DigitCharacter):>"Lor"<>char<>"?"]&)@(StringReplace[#,("Spin"~~char:DigitCharacter):>"Spin"<>char<>"?"]&)@(StringReplace[#,("Gluon"~~char:DigitCharacter):>"Gluon"<>char<>"?"]&)@(StringReplace[#,("Colour"~~char:DigitCharacter):>"Colour"<>char<>"?"]&)@(StringReplace[#,"["-> "("]&)@(StringReplace[#,"]"-> ")"]&)@(ToString[InputForm[#]]&)@(currentField/.SubstitutionsPolarization);
      currentPolarizationString=((StringReplace[#,"Null"-> "0"]&)@(StringReplace[#,"FO$Gamma"-> "GammaM"]&)@(StringReplace[#,"FO$Delta"-> "d_"]&)@(StringReplace[#,("QuestionMark"~~char:LetterCharacter):>"?"<>char]&)@(StringReplace[#,"["-> "("]&)@(StringReplace[#,"]"-> ")"]&)@(ToString[InputForm[#]])&)@currentPolarization;

      WriteString[outfile,"id   pol("<>currentFieldString<>") = "<>currentPolarizationString<>";\n"]
      ]

    ,{j,1,Length[allFieldsInFR]}];
    WriteString[outfile,"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"#endprocedure Polarizations\n\n"];
  Close[outfile];
]

